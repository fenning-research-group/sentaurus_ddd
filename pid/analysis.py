import os
import h5py
import numpy as np

class analysis:
    
    def read_jv(self, h5_filename: str) -> np.ndarray:
        """
        Reads the IV curve from the plt file generated by sentaurus

        Parameters
        ----------
        h5_filename: str
            The basename .plt JV file

        Returns
        -------
        np.ndarray
            An array with the current density as a function of the voltage
        """
        full_file = os.path.join(self._folder_path, h5_filename)
        # main_group = 'collection/geometry_0/state_0'
        voltage_dataset_name = 'em_contact OuterVoltage'
        current_dataset_name = 'base_contact TotalCurrent'
        voltage_dataset = self.tdr_get_plt_dataset(h5file=full_file, dataset_name=voltage_dataset_name)
        current_dataset = self.tdr_get_plt_dataset(h5file=full_file, dataset_name=current_dataset_name)

        voltage = np.array(voltage_dataset)
        current = np.array(current_dataset)
        jv = np.array(
            [(v, j) for v, j in zip(voltage, current)]
        )
        return jv

    @staticmethod
    def tdr_list_plt_datasets(h5file: str) -> dict:
        main_group = 'collection/geometry_0/state_0'
        with h5py.File(h5file, 'r') as hf:
            hf_datasets = list(hf[main_group])
            ds = {hf['collection/geometry_0/state_0'][d].attrs['name'].astype(str): d for d in hf_datasets}
        return ds

    def tdr_get_plt_dataset(self, h5file: str, dataset_name: str):
        available_datasets = self.tdr_list_plt_datasets(h5file=h5file)
        main_group = 'collection/geometry_0/state_0'
        if dataset_name in available_datasets:
            with h5py.File(h5file, 'r') as hf:
                ds = hf[main_group][dataset_name]
        else:
            ds = None
        return ds