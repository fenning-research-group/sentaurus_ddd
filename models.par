* Copyright (c) 1994-2015 Synopsys, Inc.
* This parameter file and the associated documentation are proprietary
* to Synopsys, Inc.  This parameter file may only be used in accordance
* with the terms and conditions of a written license agreement with
* Synopsys, Inc.  All other use, reproduction, or distribution of this
* parameter file is strictly prohibited.


Material = "Metal" {

Epsilon
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 0.0000e+00	# [1]
}


Epsilon_aniso
{ *  Ratio of the permittivities of material and vacuum

  * epsilon() = epsilon
	epsilon	= 0.0000e+00	# [1]
}


RefractiveIndex
{ *  Optical Refractive Index

  * refractiveindex() = refractiveindex * (1 + alpha * (T-Tpar))
	Tpar	= 3.0000e+02	# [K]
	refractiveindex	= 0.0000e+00	# [1]
	alpha	= 2.0000e-04	# [1/K]

  * Gain dependence of refractive index in active region:
  * a) Linear model: delta n = a0 * ( (n+p)/(2 * N0) - 1)
  * b) Logarithmic model: delta n = a0 * log ( (n+p)/(2 * N0) )
  * where n/p are the carrier densities in the active region. 
	a0	= 0.0000e+00	# [1]
	N0	= 1.0000e+18	# [1/cm^3]
}


ComplexRefractiveIndex
{ *  Complex refractive index model: n_complex = n + i*k (unitless)
  *  
  *  with n = n_0 + delta_n_lambda + delta_n_T + delta_n_carr + delta_n_gain 
  *       k = k_0 + delta_k_lambda             + delta_k_carr                
  
  * Base refractive index and extinction coefficient: 
  *     n_0, k_0 
  
  * Wavelength dependence (real and imag): 
  *     Formula 0: delta_n_lambda = Cn_lambda * lambda + Dn_lambda * lambda^2 
  *                delta_k_lambda = Ck_lambda * lambda + Dk_lambda * lambda^2 
  *     Formula 1: Read tabulated values 
  *                NumericalTable (...)  
  *     Formula 2: Read tabulated values from file 
  *                NumericalTable = <string> 
  
  * Temperature dependence (real): 
  *     delta_n_T = n_0 * ( Cn_temp * (T-Tpar)) 
  
  * Carrier dependence (real) 
  *     delta_n_carr = - Cn_carr * (const.) * (n/m_e + p/m_h) 
  
  * Carrier dependence (imag) 
  *     delta_k_carr = 1 / (4*PI) * (wavelength^Gamma_k_carr_e*Ck_carr_e*n + wavelength^Gamma_k_carr_h*Ck_carr_h*p) 
  
  * Gain dependence (real) 
  *     lin: delta_n_gain = Cn_gain * ( (n+p)/(2 * Npar) - 1) 
  *     log: delta_n_gain = Cn_gain * log ( (n+p)/(2 * Npar ) )
	n_0	= 1	# [1]
	k_0	= 0.0000e+00	# [1]
	Cn_lambda	= 0.0000e+00	# [um^-1]
	Dn_lambda	= 0.0000e+00	# [um^-2]
	Ck_lambda	= 0.0000e+00	# [um^-1]
	Dk_lambda	= 0.0000e+00	# [um^-2]
	Cn_temp	= 2.0000e-04	# [K^-1]
	Cn_carr	= 1	# [1]
	Ck_carr	= 0.0000e+00 ,	0.0000e+00	# [cm^2]
	Gamma_k_carr	= 1 ,	1	# [1]
	Cn_gain	= 0.0000e+00	# [1]
	Npar	= 1.0000e+18	# [cm^-3]
        Formula = 0
	Tpar	= 3.0000e+02	# [K]
} 


* SpectralConversion
* { * Spectral Conversion Model
*   No default model, user has to define.
*   All wavelength parameters should be in nanometers.
*   Choice of Analytic or NumericalTable selected in Physics section of region
*  
*   ConversionEfficiency = float     * ratio of absorbed photons that are reemitted.
*   AbsorptionScaling = float        * scale absorption
*   EmissionScaling = float          * scale emission
*   Analytic (
*     AbsorptionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*     EmissionProfile = (
*        Gaussian(lambda0 sigma peakvalue dc_offset lambda_range0 lambda_range1)
*        Lorentzian(lambda0 width peakvalue dc_offset lambda_range0 lambda_range1)
*        ...
*     )
*   )
*   NumericalTable (
*     AbsorptionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )
*     EmissionProfile = (
*        lambda0 value0
*        lambda1 value1
*        ...
*     )

*   ConversionEfficiency = 1.0
* }


LatticeHeatCapacity
{ *  lumped electron-hole-lattice heat capacity

  * cv() = cv + cv_b * T + cv_c * T^2 + cv_d * T^3 
	cv	= 0.0000e+00	# [J/(K cm^3)]
	cv_b	= 0.0000e+00	# [J/(K^2 cm^3)]
	cv_c	= 0.0000e+00	# [J/(K^3 cm^3)]
	cv_d	= 0.0000e+00	# [J/(K^4 cm^3)]
}


Kappa
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 2.38	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}


Kappa_aniso
{ *  Lattice thermal conductivity

  * Formula = 1:
  * kappa() = kappa + kappa_b * T + kappa_c * T^2 
	kappa	= 2.38	# [W/(K cm)]
	kappa_b	= 0.0000e+00	# [W/(K^2 cm)]
	kappa_c	= 0.0000e+00	# [W/(K^3 cm)]
}

Bandgap
{ * For conductors Band Gap is zero and the following parameters are used:
	WorkFunction	= 4.25	# [eV]
	FermiEnergy	= 11.7	# [eV]
  * for backward compatibility Chi0 could be used to define the work function.
}

eDOSMass
{
  * For effective mass specification Formula1 (me approximation):
  * or Formula2 (Nc300) can be used :
	Formula	= 1	# [1]
  * Formula1:
  * me/m0 = [ (6 * mt)^2 *  ml ]^(1/3) + mm
  * mt = a[Eg(0)/Eg(T)] 
  * Nc(T) = 2(2pi*kB/h_Planck^2*me*T)^3/2 = 2.5094e19 ((me/m0)*(T/300))^3/2 
	a	= 0.0000e+00	# [1]
	ml	= 0.0000e+00	# [1]
	mm	= 1	# [1]
}

SchroedingerParameters:
{ * For the hole masses for Schroedinger equation you can
  * use different formulas.
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    m(k)/m0=1/(A+-sqrt(B+C*((xy)^2+(yz)^2+(zx)^2)))
  *    where k=(x,y,z) is unit normal vector in reziprocal
  *    space.  '+' for light hole band, '-' for heavy hole band
  * 2: Heavy hole mass mh and light hole mass ml are
  *    specified explicitly.
  *    Use me as electron mass for free-carrier effect in 
  *    the refractive index model.
  * For electron masses, the following formula options exist:
  * 0: use the isotropic density of states effective mass
  * 1: (for materials with Si-like hole band structure)
  *    use the a, ml, and mm parameters from eDOSMass.
  *    Typically, this leads to anisotropy.
	formula	= 0 ,	3	# [1]
  * Lifting of degeneracy of bulk valleys. The value for
  * electrons is added to the band edge for the subband
  * ladder of lower degeneracy if positive, and subtracted
  * from the band edge for the ladder of higher degeneracy
  * if negative. (that is, the value of the band edge is
  * always increased).  For holes, the value is subtracted from
  * the band edge for the heavy hole band is positive,
  * add added tp that of the light hole band if
  * negative.  The signs are such that the shift always
  * moves the band edges 'outward', away from midgap.  The
  * gap itself is defined as the separation of the
  * unshifted band edges and remains unaffected.
	offset	= 0.0000e+00 ,	0.0000e+00	# [eV]
  * Alternative to the specification of formula, offset,
  * and masses, you can make an arbitrary number of ladder
  * specification, 'eLadder(mz, mxy, deg, dE) and hLadder(...)
  * Here, mz is the quantization mass, mxy an in-plane DOS mass,
  * deg the ladder degeneracy, and dE an shift of the band edge
  * for the ladder (non-negative; the shift is always outward,
  * away from midgap).  When present, we solve the Schroedinger
  * equation separately for each ladder

  * Temperatures in rescaling of the mxy for eLadder and hLadder
	ShiftTemperature	= 1.0000e+10 ,	1.0000e+10	# [K]
}


MMPeltierHeat  
{ * Metal/Metal Peltier heat parameters 
  * Hpeltier = alpha*j*T*Pdiff   Peltier Heat
  * where: 
  *     j is the current density 
  *     alpha is an adjustable parameter 
  *     Pdiff is Seeback coefficients difference at interface 
	alpha	= 1	# [1]
}

Resistivity
{ * Resist(T) = Resist0 * ( 1 + TempCoef * ( T - 273 ) )
	Resist0	= 2.4500e+10	# [ohm*cm]
	TempCoef	= 4.5000e-03	# [1/K]
}


}
